- name: "Update apt cache and install {{ openssl_version }}, {{ python3_version }} and {{ certbot_version }}"
  apt:
    name: "{{ openssl_version }}, {{ python3_version }}, {{ certbot_version }}"
    state: present
    update_cache: yes

- name: "Create required directories in /etc/letsencrypt"
  file:
    path: "/etc/letsencrypt/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=x,o=x
  with_items:
  - "account"
  - "certs"
  - "csrs"
  - "keys"    

- name: "Generate a Let's Encrypt account key"
  shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"

- name: "Generate Let's Encrypt private key"
  shell: "openssl genrsa 4096 | sudo tee {{ letsencrypt_keys_dir }}/{{ domain_name }}.key"

- name: "Generate Let's Encrypt CSR"
  shell: "openssl req -new -sha256 -key {{ letsencrypt_keys_dir }}/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},DNS:www.{{ domain_name }}\")) | sudo tee {{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
  args:
    executable: /bin/bash

- name: "Create a challenge for {{ domain_name }} using a account key file"
  community.crypto.acme_certificate:
    acme_version: "{{ acme_version }}"
    acme_directory: "{{ acme_directory }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}-fullchain.crt"
    terms_agreed: 1
  register: your_domain_challenge

- name: "Create .well-known/acme-challenge directory"
  file:
    path: "/var/www/{{ domain_name }}/html/.well-known/acme-challenge"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx

- name: "Copy ACME challenge data to .well-known/acme-challenge"
  copy:
    dest: "/var/www/{{ domain_name}}/html/{{ item.value['http-01']['resource'] }}"
    content: "{{ item.value['http-01']['resource_value'] }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  loop: "{{ your_domain_challenge.challenge_data | dict2items }}"
  when: your_domain_challenge is changed

- name: Flush handlers
  meta: flush_handlers

- name: Let the challenge be validated and retrieve the cert and intermediate certificate
  community.crypto.acme_certificate:
    acme_version: "{{ acme_version }}"
    acme_directory: "{{ acme_directory }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}-fullchain.crt"
    terms_agreed: 1
    chain_dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}-intermediate.crt"
    data: "{{ your_domain_challenge }}"

- name: Copy ssl virtualhost conf to server
  ansible.builtin.template:
    src: "templates/vhost_ssl.conf.j2"
    dest: "/etc/nginx/sites-available/{{ domain_name }}.conf"
  notify: Restart Nginx

- name: Add letsencrypt cronjob for cert renewal
  cron:
    name: letsencrypt_renewal
    special_time: weekly
    job: "certbot --renew-by-default certonly -n --webroot -w /etc/letsencrypt -m {{ acme_email }} --agree-tos -d {{ domain_name }} -d www.{{ domain_name }} && service nginx reload"
 
  # certbot --renew-by-default certonly -n --webroot -w /etc/letsencrypt -m certificate-reminders@olegen.devops.rebrain.srwx.net --agree-tos -d olegen.devops.rebrain.srwx.net -d www.olegen.devops.rebrain.srwx.net  && service nginx reload